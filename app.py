import networkx as nx
from ipysigma import Sigma
from shinyswatch import theme
from shiny import reactive, req
from shiny.express import input, ui, render
from shinywidgets import render_widget, render_plotly
import pandas as pd
import numpy as np
import netfunction
import plotly.express as px
from faicons import icon_svg
import plotly.graph_objects as go


ui.page_opts(
    title="Network Dashboard",
    fillable=True,
    id="page",
    theme=theme.journal
)

with ui.sidebar(width=280):
    ui.HTML("<h4>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>")
    ui.hr()
    ui.input_file("file", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:", accept=".xlsx", width=250)


@reactive.calc
def df():
    f = req(input.file())
    return pd.read_excel(f[0]['datapath'])


@reactive.calc
def processed_data():
    data = df()
    data['–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'] = data['–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏'].apply(
        netfunction.parse_skills)
    data = data.dropna(subset='–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å')
    data.reset_index(inplace=True, drop=True)
    data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'] = pd.to_datetime(data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'])
    data["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] = data["–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"].apply(
        netfunction.get_federal_district)
    return data


@reactive.effect
def update_filter_choices():
    data = processed_data()
    exp_choices = sorted(data["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"].dropna().unique().tolist())
    region_choices = sorted(
        data["–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"].dropna().unique().tolist())
    ui.update_selectize("experience", choices=exp_choices)
    ui.update_selectize("region", choices=region_choices)


@reactive.effect
def update_date_range():
    data = processed_data()
    if not data.empty:
        dates = data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏']
        min_date = dates.min().date().isoformat()
        max_date = dates.max().date().isoformat()
        ui.update_date_range("pub_date", min=min_date,
                             max=max_date, start=min_date, end=max_date)


@reactive.effect
def update_salary_range():
    data = processed_data()
    if not data.empty:
        min_salary = int(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'].min())
        max_salary = int(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'].max())
        ui.update_slider("salary", min=min_salary,
                         max=max_salary, value=[min_salary, max_salary])


@reactive.calc
def filtered_data():
    data = processed_data()
    if input.pub_date():
        start_date, end_date = input.pub_date()
        data = data[(data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'] >= pd.to_datetime(start_date)) &
                    (data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'] <= pd.to_datetime(end_date))]
    if input.experience():
        data = data[data['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'].isin(input.experience())]
    if input.region():
        data = data[data['–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞'].isin(input.region())]
    if input.salary():
        min_salary, max_salary = input.salary()
        data = data[(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'] >= min_salary) &
                    (data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'] <= max_salary)]
    return data


@reactive.calc
def skills_roles_matrix():
    data = filtered_data()
    if data.empty:
        return pd.DataFrame()
    return netfunction.create_group_values_matrix(data, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏')


@reactive.calc
def bipartite_graph():
    matrix = skills_roles_matrix()
    if matrix.empty:
        return None
    return netfunction.create_bipartite_graph(matrix)


@reactive.effect
def update_filter_choices_sem():
    data = processed_data()
    exp_choices = sorted(data["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"].dropna().unique().tolist())
    region_choices = sorted(
        data["–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"].dropna().unique().tolist())
    specialty_choices = sorted(
        data["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"].dropna().unique().tolist())
    ui.update_selectize("experience_sem", choices=exp_choices)
    ui.update_selectize("region_sem", choices=region_choices)
    ui.update_selectize("specialty", choices=specialty_choices)


@reactive.effect
def update_date_range_sem():
    data = processed_data()
    if not data.empty:
        dates = data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏']
        min_date = dates.min().date().isoformat()
        max_date = dates.max().date().isoformat()
        ui.update_date_range("pub_date_sem", min=min_date,
                             max=max_date, start=min_date, end=max_date)


@reactive.effect
def update_salary_range_sem():
    data = processed_data()
    if not data.empty:
        min_salary = int(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'].min())
        max_salary = int(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'].max())
        ui.update_slider("salary_sem", min=min_salary,
                         max=max_salary, value=[min_salary, max_salary])


@reactive.calc
def filtered_data_semantic():
    data = processed_data()
    if input.pub_date_sem():
        start_date, end_date = input.pub_date_sem()
        data = data[(data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'] >= pd.to_datetime(start_date)) &
                    (data['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'] <= pd.to_datetime(end_date))]
    if input.experience_sem():
        data = data[data['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'].isin(input.experience_sem())]
    if input.region_sem():
        data = data[data['–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞'].isin(input.region_sem())]
    if input.salary_sem():
        min_salary, max_salary = input.salary_sem()
        data = data[(data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'] >= min_salary) &
                    (data['–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'] <= max_salary)]
    if input.specialty():
        data = data[data['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'].isin(input.specialty())]
    return data


@reactive.calc
def semantic_cooccurrence_matrix():
    data = filtered_data_semantic()
    if data.empty:
        return pd.DataFrame()
    return netfunction.create_co_occurrence_matrix(data, '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏')


@reactive.calc
def semantic_graph():
    matrix = semantic_cooccurrence_matrix()
    if matrix.empty:
        return None
    G = nx.from_pandas_adjacency(matrix)
    return G


with ui.nav_panel("–î–∞–Ω–Ω—ã–µ", icon=icon_svg("table")):
    with ui.card(full_screen=True):
        ui.card_header("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        @render.data_frame
        def table():
            return render.DataTable(processed_data(), filters=True, height='700px')


with ui.nav_panel("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", icon=icon_svg("chart-bar")):
    with ui.layout_columns(col_widths=(12, 12)):
        with ui.card(full_screen=True):
            ui.card_header(
                "üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã: –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ ‚Üí –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")

            @render_plotly
            def sankey_chart():
                data = filtered_data()
                if data.empty:
                    return px.scatter(title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                df_sankey = data.groupby(["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"])[
                    "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"].mean().reset_index()

                unique_districts = list(
                    df_sankey["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"].unique())
                unique_specialties = list(
                    df_sankey["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"].unique())
                unique_experience = list(df_sankey["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"].unique())

                nodes = unique_districts + unique_specialties + unique_experience
                node_indices = {name: i for i, name in enumerate(nodes)}

                source_districts = df_sankey["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"].map(
                    node_indices).tolist()
                target_specialties = df_sankey["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"].map(
                    node_indices).tolist()
                values_districts = df_sankey["–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"].tolist()

                source_specialties = df_sankey["–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"].map(
                    node_indices).tolist()
                target_experience = df_sankey["–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"].map(
                    node_indices).tolist()
                values_specialties = df_sankey["–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"].tolist()

                source = source_districts + source_specialties
                target = target_specialties + target_experience
                value = values_districts + values_specialties

                palette = px.colors.qualitative.Set2
                node_colors = {node: palette[i % len(
                    palette)] for i, node in enumerate(nodes)}

                opacity = 0.4
                link_colors = [node_colors[nodes[src]].replace(
                    ")", f", {opacity})").replace("rgb", "rgba") for src in source]

                fig = go.Figure(go.Sankey(
                    valueformat=".0f",
                    node=dict(
                        pad=15,
                        thickness=25,
                        line=dict(color="black", width=0.7),
                        label=nodes,
                        color=[node_colors[node]
                               for node in nodes],
                        hoverlabel=dict(
                            font=dict(size=14, family="Arial", color="black", weight="bold")),
                    ),
                    link=dict(
                        source=source,
                        target=target,
                        value=value,
                        color=link_colors
                    )
                ))

                fig.update_layout(
                    title=None,
                    font=dict(size=14, family="Arial", color="black",
                              weight="bold"),
                    plot_bgcolor="white"
                )

                return fig

        with ui.card(full_screen=True):
            ui.card_header("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º")

            @render_plotly
            def vacancies_trend():
                data = filtered_data()
                if data.empty:
                    return px.scatter(title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                df_grouped = data.groupby(
                    [pd.Grouper(key="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", freq="M"),
                     "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"]
                ).size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")

                fig = px.line(
                    df_grouped,
                    x="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π",
                    color="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                    title="",
                    template="plotly_white",
                    markers=True
                ).update_layout(xaxis_title=None, yaxis_title=None, title=None)
                return fig


with ui.nav_panel("–°–µ—Ç—å", icon=icon_svg('circle-nodes')):
    with ui.navset_card_underline(id="selected_navset_card_underline1"):
        with ui.nav_panel("–î–≤—É–º–æ–¥–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ"):
            with ui.layout_columns(col_widths=(3, 9)):
                with ui.card(full_screen=False):
                    ui.card_header("üîé –§–∏–ª—å—Ç—Ä—ã")
                    ui.input_date_range("pub_date", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", start="2024-01-01",
                                        end="2024-12-31", min="2024-01-01", max="2024-12-31", width=250)
                    ui.input_selectize("experience", "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
                                       choices=[], multiple=True, width=250)
                    ui.input_selectize("region", "–†–µ–≥–∏–æ–Ω", choices=[],
                                       multiple=True, width=250)
                    ui.input_slider("salary", "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞",
                                    min=0, max=100000, value=[0, 100000])
                with ui.card(full_screen=True):
                    ui.card_header("üîó –ì—Ä–∞—Ñ")

                    @render_widget
                    def widget():
                        if filtered_data().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞", action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º", type="error", duration=10)
                            return None
                        G = bipartite_graph()
                        if G is None:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞", action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞", type="error", duration=10)
                            return None
                        return Sigma(G, node_size=list(dict(G.degree()).values()),
                                     node_size_range=(1, 10),
                                     node_metrics=['louvain'],
                                     node_color='louvain',
                                     node_border_color_from='node')

        with ui.nav_panel("–û–¥–Ω–æ–º–æ–¥–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ"):
            with ui.layout_columns(col_widths=(3, 9)):
                with ui.card(full_screen=False):
                    ui.card_header("üîé –§–∏–ª—å—Ç—Ä—ã")
                    ui.input_date_range("pub_date_sem", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", start="2024-01-01",
                                        end="2024-12-31", min="2024-01-01", max="2024-12-31", width=250)
                    ui.input_selectize("experience_sem", "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
                                       choices=[], multiple=True, width=250)
                    ui.input_selectize("region_sem", "–†–µ–≥–∏–æ–Ω", choices=[],
                                       multiple=True, width=250)
                    ui.input_slider("salary_sem", "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞",
                                    min=0, max=100000, value=[0, 100000])
                    ui.input_selectize("specialty", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                                       choices=[], multiple=True, width=250)
                with ui.card(full_screen=True):
                    ui.card_header("üîó –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ")

                    @render_widget
                    def widget_semantic():
                        if filtered_data_semantic().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞", action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º", type="error", duration=10)
                            return None
                        G = semantic_graph()
                        if G is None:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞", action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞", type="error", duration=10)
                            return None
                        return Sigma(G, node_size=list(dict(G.degree()).values()),
                                     node_size_range=(1, 10),
                                     node_metrics=['louvain'],
                                     node_color='louvain',
                                     node_border_color_from='node')


with ui.nav_panel("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", icon=icon_svg('diagram-project')):
    with ui.navset_card_underline(id="selected_navset_card_underline"):
        with ui.nav_panel("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤"):
            with ui.layout_columns(col_widths=(6, 6)):
                with ui.card(full_screen=True):
                    ui.card_header("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤ ‚Ññ 1")

                    with ui.layout_columns(col_widths={"sm": (6, 6, 12)}):
                        ui.input_selectize(
                            "node_1", "–í—ã–±—Ä–∞—Ç—å —É–∑–µ–ª:", choices=[])
                        ui.input_selectize(
                            "node_type_1", "–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —É–∑–ª–∞:", choices=["–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–ù–∞–≤—ã–∫"])
                        ui.input_numeric("obs_1", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:",
                                         5, min=1, max=30, width="750px")
                    ui.hr()

                    @reactive.effect
                    def update_node_choices_1():
                        matrix = skills_roles_matrix()
                        if matrix.empty:
                            ui.update_selectize("node_1", choices=[])
                        else:
                            choices = list(matrix.columns) + list(matrix.index)
                            ui.update_selectize("node_1", choices=choices)

                    @render_plotly
                    def recommendations_plot_1():
                        if filtered_data().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞", action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º", type="error", duration=10)
                            return None
                        G = bipartite_graph()
                        node = input.node_1()
                        node_type = input.node_type_1()
                        level_target = "first" if node_type == "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" else "second"
                        top_n = input.obs_1()

                        if not node:
                            return px.bar(x=["–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤"], y=[0], template="plotly_white").update_layout()

                        recs = netfunction.recommend_similar_nodes(
                            G, node, level_target=level_target, top_n=top_n)
                        nodes, similarities = zip(*recs)
                        unique_nodes = list(set(nodes))
                        colors = px.colors.qualitative.G10
                        color_map = {
                            n: colors[i % len(colors)] for i, n in enumerate(unique_nodes)}

                        fig = px.bar(y=nodes, x=similarities,
                                     labels={'x': '–°—Ö–æ–¥—Å—Ç–≤–æ', 'y': ''},
                                     title=f'–¢–æ–ø {top_n} —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤ –¥–ª—è —É–∑–ª–∞ "{node}"',
                                     color=nodes, template="plotly_white",
                                     color_discrete_map=color_map).update_layout(showlegend=False, title_x=0.5)
                        return fig

                with ui.card(full_screen=True):
                    ui.card_header("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤ ‚Ññ 2")

                    with ui.layout_columns(col_widths={"sm": (6, 6, 12)}):
                        ui.input_selectize(
                            "node_2", "–í—ã–±—Ä–∞—Ç—å —É–∑–µ–ª:", choices=[])
                        ui.input_selectize(
                            "node_type_2", "–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —É–∑–ª–∞:", choices=["–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–ù–∞–≤—ã–∫"])
                        ui.input_numeric("obs_2", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:",
                                         5, min=1, max=30, width="750px")
                    ui.hr()

                    @reactive.effect
                    def update_node_choices_2():
                        matrix = skills_roles_matrix()
                        if matrix.empty:
                            ui.update_selectize("node_2", choices=[])
                        else:
                            choices = list(matrix.columns) + list(matrix.index)
                            ui.update_selectize("node_2", choices=choices)

                    @render_plotly
                    def recommendations_plot_2():
                        if filtered_data().empty:
                            ui.notification_show(
                                ui="–û—à–∏–±–∫–∞", action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º", type="error", duration=10)
                            return None
                        G = bipartite_graph()
                        node = input.node_2()
                        node_type = input.node_type_2()
                        level_target = "first" if node_type == "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" else "second"
                        top_n = input.obs_2()

                        if not node:
                            return px.bar(x=["No node selected"], y=[0], template="plotly_white").update_layout()

                        recs = netfunction.recommend_similar_nodes(
                            G, node, level_target=level_target, top_n=top_n)
                        nodes, similarities = zip(*recs)
                        unique_nodes = list(set(nodes))
                        colors = px.colors.qualitative.G10
                        color_map = {
                            n: colors[i % len(colors)] for i, n in enumerate(unique_nodes)}

                        fig = px.bar(y=nodes, x=similarities,
                                     labels={'x': '–°—Ö–æ–¥—Å—Ç–≤–æ', 'y': ''},
                                     title=f'–¢–æ–ø {top_n} —Å—Ö–æ–∂–∏—Ö —É–∑–ª–æ–≤ –¥–ª—è —É–∑–ª–∞ "{node}"',
                                     color=nodes, template="plotly_white",
                                     color_discrete_map=color_map).update_layout(showlegend=False, title_x=0.5)
                        return fig

        with ui.nav_panel("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤"):
            with ui.layout_columns(col_widths=(6, 6)):
                with ui.card(full_screen=True):
                    ui.card_header("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤ ‚Ññ 1")

                    with ui.layout_columns(col_widths={"sm": (6, 6, 12)}):
                        ui.input_selectize(
                            "node3", "–í—ã–±—Ä–∞—Ç—å —É–∑–µ–ª:", choices=[])
                        ui.input_selectize("node_type3", "–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —É–∑–ª–∞:",
                                           choices=["–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–ù–∞–≤—ã–∫"])
                        ui.input_numeric("obs3", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:", 5, min=1,
                                         max=30, width="750px")

                    ui.hr()

                    @reactive.effect
                    def update_node3_choices():
                        matrix = skills_roles_matrix()
                        if matrix.empty:
                            ui.update_selectize("node3", choices=[])
                        else:
                            choices = list(matrix.columns) + list(matrix.index)
                            ui.update_selectize("node3", choices=choices)

                    @render_plotly
                    def neighbor_recommendations_plot_1():
                        if filtered_data().empty:
                            ui.notification_show(ui="–û—à–∏–±–∫–∞",
                                                 action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º",
                                                 type="error",
                                                 duration=10)
                            return None
                        G = bipartite_graph()
                        node = input.node3()
                        node_type = input.node_type3()
                        level_target = "first" if node_type == "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" else "second"
                        top_n = input.obs3()

                        if not node:
                            return px.bar(x=["No node selected"], y=[0], template="plotly_white").update_layout()

                        recs = netfunction.neighbor_recommendations(
                            G, node, level_target=level_target, top_n=top_n)

                        try:
                            nodes, similarities = zip(*recs)
                        except ValueError:
                            return px.bar(x=["No node selected"], y=[0], template="plotly_white").update_layout()

                        unique_nodes = list(set(nodes))
                        colors = px.colors.qualitative.G10
                        color_map = {
                            n: colors[i % len(colors)] for i, n in enumerate(unique_nodes)}
                        fig = px.bar(y=nodes, x=similarities,
                                     labels={'x': '–í–µ—Å', 'y': ''},
                                     title=f'–¢–æ–ø {top_n} —Å–æ—Å–µ–¥–µ–π –¥–ª—è —É–∑–ª–∞ "{node}"',
                                     color=nodes,
                                     template="plotly_white",
                                     color_discrete_map=color_map).update_layout(showlegend=False, title_x=0.5)
                        return fig
                # –ù–æ–≤—ã–π
                with ui.card(full_screen=True):
                    ui.card_header("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤ ‚Ññ 2")

                    with ui.layout_columns(col_widths={"sm": (6, 6, 12)}):
                        ui.input_selectize(
                            "node4", "–í—ã–±—Ä–∞—Ç—å —É–∑–µ–ª:", choices=[])
                        ui.input_selectize("node_type4", "–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —É–∑–ª–∞:",
                                           choices=["–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–ù–∞–≤—ã–∫"])
                        ui.input_numeric(
                            "obs4", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:", 5, min=1, max=30, width="750px")

                    ui.hr()

                    @reactive.effect
                    def update_node4_choices():
                        matrix = skills_roles_matrix()
                        if matrix.empty:
                            ui.update_selectize("node4", choices=[])
                        else:
                            choices = list(matrix.columns) + list(matrix.index)
                            ui.update_selectize("node4", choices=choices)

                    @render_plotly
                    def neighbor_recommendations_plot_2():
                        if filtered_data().empty:
                            ui.notification_show(ui="–û—à–∏–±–∫–∞",
                                                 action="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º",
                                                 type="error",
                                                 duration=10)
                            return None
                        G = bipartite_graph()
                        node = input.node4()
                        node_type = input.node_type4()
                        level_target = "first" if node_type == "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" else "second"
                        top_n = input.obs4()

                        if not node:
                            return px.bar(x=["No node selected"], y=[0], template="plotly_white").update_layout()

                        recs = netfunction.neighbor_recommendations(
                            G, node, level_target=level_target, top_n=top_n)

                        try:
                            nodes, similarities = zip(*recs)
                        except ValueError:
                            return px.bar(x=["No node selected"], y=[0], template="plotly_white").update_layout()

                        unique_nodes = list(set(nodes))
                        colors = px.colors.qualitative.G10
                        color_map = {
                            n: colors[i % len(colors)] for i, n in enumerate(unique_nodes)}
                        fig = px.bar(y=nodes, x=similarities,
                                     labels={'x': '–í–µ—Å', 'y': ''},
                                     title=f'–¢–æ–ø {top_n} —Å–æ—Å–µ–¥–µ–π –¥–ª—è —É–∑–ª–∞ "{node}"',
                                     color=nodes,
                                     template="plotly_white",
                                     color_discrete_map=color_map).update_layout(showlegend=False, title_x=0.5)
                        return fig


ui.nav_spacer()
with ui.nav_control():
    ui.input_dark_mode(id="mode")
